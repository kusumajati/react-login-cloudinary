{"ast":null,"code":"var _jsxFileName = \"/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js\";\nimport React, { createRef } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\nvar dropzoneRef = createRef();\nexport default class ProductForm2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUploadImages = images => {\n      // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n      const uploads = images[0]; // our formdata\n\n      const formData = new FormData();\n      formData.append(\"file\", uploads);\n      formData.append(\"tags\", 'product_image'); // Add tags for the images - {Array}\n\n      formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n\n      formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n\n      formData.append(\"timestamp\", Date.now() / 1000 | 0); // Replace cloudinary upload URL with yours\n\n      return axios.post(\"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\", formData, {\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        }\n      }).then(response => {\n        //masukan logic\n        this.setState({\n          image: response.data.secure_url\n        });\n      });\n    };\n\n    this.state = {\n      image: ''\n    };\n    this.onChangeName = this.onChangeName.bind(this);\n    this.onChangePrice = this.onChangePrice.bind(this);\n    this.createProduct = this.createProduct.bind(this);\n  }\n\n  createProduct(event) {\n    event.preventDefault();\n    fetch('https://mpbinarsiang.herokuapp.com/product', {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin',\n      // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('TOKEN') // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrer: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n  }\n\n  onChangeName(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  onChangePrice(event) {\n    this.setState({\n      price: event.target.value\n    });\n  } // This function does the uploading to cloudinary\n\n\n  render() {\n    var dropzone;\n\n    if (!this.state.image) {\n      //dropzone nya gambar kamera\n      dropzone = React.createElement(Dropzone, {\n        id: \"dropzone\",\n        ref: dropzoneRef,\n        onDrop: this.handleUploadImages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, ({\n        getRootProps,\n        getInputProps\n      }) => React.createElement(\"div\", Object.assign({}, getRootProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })), React.createElement(\"img\", {\n        style: {\n          width: '200px'\n        },\n        src: \"https://www.mbsplugins.de/images/drop-files-here-extra.jpg\",\n        alt: \"\",\n        srcset: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })));\n    } else {\n      //dropzonnya gambr dari response\n      dropzone = React.createElement(Dropzone, {\n        id: \"dropzone\",\n        ref: dropzoneRef,\n        onDrop: this.handleUploadImages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, ({\n        getRootProps,\n        getInputProps\n      }) => React.createElement(\"div\", Object.assign({}, getRootProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })), React.createElement(\"img\", {\n        style: {\n          width: 100\n        },\n        src: this.state.image,\n        alt: \"\",\n        srcset: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })));\n    }\n\n    if (!localStorage.getItem('TOKEN')) {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleEmail\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Nama Produk\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.onChangeName,\n        type: \"text\",\n        name: \"email\",\n        id: \"exampleEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"examplePassword\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Harga Produk\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.onChangePrice,\n        type: \"number\",\n        name: \"password\",\n        id: \"examplePassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"dropzone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Upload Gambar\"), dropzone), React.createElement(FormGroup, {\n        check: true,\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: 10,\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.createProduct,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js"],"names":["React","createRef","Col","Button","Form","FormGroup","Label","Input","FormText","ReactDOM","Dropzone","axios","Redirect","dropzoneRef","ProductForm2","Component","constructor","props","handleUploadImages","images","uploads","formData","FormData","append","Date","now","post","headers","then","response","setState","image","data","secure_url","state","onChangeName","bind","onChangePrice","createProduct","event","preventDefault","fetch","method","mode","cache","credentials","localStorage","getItem","redirect","referrer","body","JSON","stringify","name","target","value","price","render","dropzone","getRootProps","getInputProps","width","size","offset"],"mappings":"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","sourcesContent":["import React, { createRef } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\n\nvar dropzoneRef = createRef()\n\nexport default class ProductForm2 extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            image: ''\n        }\n        this.onChangeName = this.onChangeName.bind(this)\n        this.onChangePrice = this.onChangePrice.bind(this)\n        this.createProduct = this.createProduct.bind(this)\n\n    }\n    createProduct(event){\n        event.preventDefault()\n        fetch('https://mpbinarsiang.herokuapp.com/product', {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': localStorage.getItem('TOKEN')\n              // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrer: 'no-referrer', // no-referrer, *client\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n          });\n    }\n    onChangeName(event) {\n        this.setState({\n            name: event.target.value\n        })\n    }\n    onChangePrice(event) {\n        this.setState({\n            price: event.target.value\n        })\n    }\n    // This function does the uploading to cloudinary\n    handleUploadImages = images => {\n        // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n        const uploads = images[0]\n        // our formdata\n        const formData = new FormData();\n        formData.append(\"file\", uploads);\n        formData.append(\"tags\", 'product_image'); // Add tags for the images - {Array}\n        formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n        formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n        formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n\n        // Replace cloudinary upload URL with yours\n        return axios.post(\n            \"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\",\n            formData,\n            { headers: { \"X-Requested-With\": \"XMLHttpRequest\" } })\n            .then(response => {\n                //masukan logic\n                this.setState({\n                    image: response.data.secure_url\n                })\n            })\n\n\n\n    }\n\n    render() {\n        var dropzone\n        if (!this.state.image) {\n            //dropzone nya gambar kamera\n            dropzone =\n                <Dropzone id='dropzone' ref={dropzoneRef} onDrop={this.handleUploadImages}>\n                    {({ getRootProps, getInputProps }) => (\n                        <div {...getRootProps()}>\n                            <input {...getInputProps()} />\n                            <img style={{ width: '200px' }} src=\"https://www.mbsplugins.de/images/drop-files-here-extra.jpg\" alt=\"\" srcset=\"\" />\n                        </div>\n                    )}\n                </Dropzone>\n        } else {\n            //dropzonnya gambr dari response\n            dropzone =\n                <Dropzone id='dropzone' ref={dropzoneRef} onDrop={this.handleUploadImages}>\n                    {({ getRootProps, getInputProps }) => (\n                        <div {...getRootProps()}>\n                            <input {...getInputProps()} />\n                            <img style={{ width: 100 }} src={this.state.image} alt=\"\" srcset=\"\" />\n                        </div>\n                    )}\n                </Dropzone>\n        }\n        if (!localStorage.getItem('TOKEN')) {\n            return (\n                <Redirect to='/login' />\n            )\n        } else {\n\n\n            return (\n                <Form>\n                    <FormGroup row>\n                        <Label for=\"exampleEmail\" sm={2}>Nama Produk</Label>\n                        <Col sm={10}>\n                            <Input onChange={this.onChangeName} type=\"text\" name=\"email\" id=\"exampleEmail\" />\n                        </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                        <Label for=\"examplePassword\" sm={2}>Harga Produk</Label>\n                        <Col sm={10}>\n                            <Input onChange={this.onChangePrice} type=\"number\" name=\"password\" id=\"examplePassword\" />\n                        </Col>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for='dropzone'>Upload Gambar</Label>\n                        {dropzone}\n                    </FormGroup>\n                    <FormGroup check row>\n                        <Col sm={{ size: 10, offset: 2 }}>\n                            <Button type='submit' onClick={this.createProduct}>Submit</Button>\n                        </Col>\n                    </FormGroup>\n                </Form>\n            );\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}