{"ast":null,"code":"var _jsxFileName = \"/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm.js\";\nimport React, { createRef } from 'react';\nimport { Container, Col, Row, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nvar dropzoneRef = createRef();\nexport default class ProductForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUploadImages = images => {\n      // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n      const uploads = images.map(image => {\n        // our formdata\n        const formData = new FormData();\n        formData.append(\"file\", image);\n        formData.append(\"tags\", 'PRODUCT_IMAGE'); // Add tags for the images - {Array}\n\n        formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n\n        formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n\n        formData.append(\"timestamp\", Date.now() / 1000 | 0); // Replace cloudinary upload URL with yours\n\n        return axios.post(\"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\", formData, {\n          headers: {\n            \"X-Requested-With\": \"XMLHttpRequest\"\n          }\n        }).then(response => console.log(response.data));\n      }); // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n\n      axios.all(uploads).then(() => {\n        // ... do anything after successful upload. You can setState() or save the data\n        console.log('Images have all being uploaded');\n      });\n    };\n\n    this.state = {};\n  } // This function does the uploading to cloudinary\n\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Row, {\n      form: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Nama Produk\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"email\",\n      id: \"exampleEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"examplePassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Harga Produk\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"password\",\n      id: \"examplePassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"dropzone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Upload Gambar\"), React.createElement(Dropzone, {\n      id: \"dropzone\",\n      ref: dropzoneRef,\n      onDrop: this.handleUploadImages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(\"img\", {\n      style: {\n        width: 100\n      },\n      src: \"https://image.flaticon.com/icons/png/512/3/3901.png\",\n      alt: \"\",\n      srcset: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })))), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Sign in\")));\n  }\n\n}","map":{"version":3,"sources":["/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm.js"],"names":["React","createRef","Container","Col","Row","Button","Form","FormGroup","Label","Input","FormText","ReactDOM","Dropzone","axios","dropzoneRef","ProductForm","Component","constructor","props","handleUploadImages","images","uploads","map","image","formData","FormData","append","Date","now","post","headers","then","response","console","log","data","all","state","render","getRootProps","getInputProps","width"],"mappings":"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","sourcesContent":["import React, { createRef } from 'react';\nimport { Container, Col, Row, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone'\nimport axios from 'axios'\n\nvar dropzoneRef = createRef()\n\nexport default class ProductForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n\n    // This function does the uploading to cloudinary\n    handleUploadImages\n     = images => {\n        // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n        const uploads = images.map(image => {\n            // our formdata\n            const formData = new FormData();\n            formData.append(\"file\", image);\n            formData.append(\"tags\", 'PRODUCT_IMAGE'); // Add tags for the images - {Array}\n            formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n            formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n            formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n\n            // Replace cloudinary upload URL with yours\n            return axios.post(\n                \"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\",\n                formData,\n                { headers: { \"X-Requested-With\": \"XMLHttpRequest\" } })\n                .then(response => console.log(response.data))\n        });\n\n        // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n        axios.all(uploads).then(() => {\n            // ... do anything after successful upload. You can setState() or save the data\n            console.log('Images have all being uploaded')\n        });\n    }\n    render() {\n        return (\n            <Container>\n                <Form>\n                    <Row form>\n                        <Col md={6}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Nama Produk</Label>\n                                <Input type=\"text\" name=\"email\" id=\"exampleEmail\" />\n                            </FormGroup>\n                        </Col>\n                        <Col md={6}>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Harga Produk</Label>\n                                <Input type=\"text\" name=\"password\" id=\"examplePassword\" />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <FormGroup>\n                        <Label for=\"dropzone\">Upload Gambar</Label>\n                        <Dropzone id='dropzone' ref={dropzoneRef} onDrop={this.handleUploadImages}>\n                            {({ getRootProps, getInputProps }) => (\n                                <div {...getRootProps()}>\n                                    <input {...getInputProps()} />\n                                    <img style={{ width: 100 }} src=\"https://image.flaticon.com/icons/png/512/3/3901.png\" alt=\"\" srcset=\"\" />\n                                </div>\n                            )}\n                        </Dropzone>\n                    </FormGroup>\n\n                    <Button>Sign in</Button>\n                </Form>\n            </Container>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}