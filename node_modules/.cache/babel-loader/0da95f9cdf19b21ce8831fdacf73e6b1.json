{"ast":null,"code":"var _jsxFileName = \"/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js\";\nimport React, { createRef } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\nvar dropzoneRef = createRef();\nexport default class ProductForm2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUploadImages = images => {\n      // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n      const uploads = images[0]; // our formdata\n\n      const formData = new FormData();\n      formData.append(\"file\", uploads);\n      formData.append(\"tags\", 'product_image'); // Add tags for the images - {Array}\n\n      formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n\n      formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n\n      formData.append(\"timestamp\", Date.now() / 1000 | 0); // Replace cloudinary upload URL with yours\n\n      return axios.post(\"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\", formData, {\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        }\n      }).then(response => {\n        //masukan logic\n        this.setState({\n          image: response.data.secure_url\n        });\n      }); // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n\n      axios.all(uploads).then(() => {\n        // ... do anything after successful upload. You can setState() or save the data\n        console.log('Images have all being uploaded');\n      });\n    };\n\n    this.state = {\n      image: ''\n    };\n    this.onChangeName = this.onChangeName.bind(this);\n    this.onChangePrice = this.onChangePrice.bind(this);\n  }\n\n  onChangeName(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  onChangePrice(event) {\n    this.setState({\n      price: event.target.value\n    });\n  } // This function does the uploading to cloudinary\n\n\n  render() {\n    var dropzone;\n\n    if (!this.state.image) {\n      //dropzone nya gambar kamera\n      dropzone = React.createElement(Dropzone, {\n        id: \"dropzone\",\n        ref: dropzoneRef,\n        onDrop: this.handleUploadImages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, ({\n        getRootProps,\n        getInputProps\n      }) => React.createElement(\"div\", Object.assign({}, getRootProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), React.createElement(\"img\", {\n        style: {\n          width: '200px'\n        },\n        src: \"https://www.mbsplugins.de/images/drop-files-here-extra.jpg\",\n        alt: \"\",\n        srcset: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })));\n    } else {\n      //dropzonnya gambr dari response\n      dropzone = React.createElement(Dropzone, {\n        id: \"dropzone\",\n        ref: dropzoneRef,\n        onDrop: this.handleUploadImages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, ({\n        getRootProps,\n        getInputProps\n      }) => React.createElement(\"div\", Object.assign({}, getRootProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(\"img\", {\n        style: {\n          width: 100\n        },\n        src: this.state.image,\n        alt: \"\",\n        srcset: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })));\n    }\n\n    if (!localStorage.getItem('TOKEN')) {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleEmail\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Nama Produk\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"email\",\n        id: \"exampleEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"examplePassword\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Harga Produk\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"number\",\n        name: \"password\",\n        id: \"examplePassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"dropzone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Upload Gambar\"), dropzone), React.createElement(FormGroup, {\n        check: true,\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: 10,\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js"],"names":["React","createRef","Col","Button","Form","FormGroup","Label","Input","FormText","ReactDOM","Dropzone","axios","Redirect","dropzoneRef","ProductForm2","Component","constructor","props","handleUploadImages","images","uploads","formData","FormData","append","Date","now","post","headers","then","response","setState","image","data","secure_url","all","console","log","state","onChangeName","bind","onChangePrice","event","name","target","value","price","render","dropzone","getRootProps","getInputProps","width","localStorage","getItem","size","offset"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone'\nimport axios from 'axios'\nimport {Redirect} from 'react-router-dom'\n\nvar dropzoneRef = createRef()\n\nexport default class ProductForm2 extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state={\n            image:''\n        }\n        this.onChangeName = this.onChangeName.bind(this)\n        this.onChangePrice = this.onChangePrice.bind(this)\n\n    }\n    onChangeName(event){\n        this.setState({\n            name:event.target.value\n        })\n    }\n    onChangePrice(event){\n        this.setState({\n            price:event.target.value\n        })\n    }\n    // This function does the uploading to cloudinary\n  handleUploadImages = images => {\n    // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n    const uploads = images[0]\n      // our formdata\n      const formData = new FormData();\n      formData.append(\"file\", uploads);\n      formData.append(\"tags\", 'product_image'); // Add tags for the images - {Array}\n      formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n      formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n      formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n\n      // Replace cloudinary upload URL with yours\n      return axios.post(\n        \"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\",\n        formData, \n        { headers: { \"X-Requested-With\": \"XMLHttpRequest\" }})\n        .then(response => {\n            //masukan logic\n            this.setState({\n                image:response.data.secure_url\n            })\n        })\n\n\n    // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n    axios.all(uploads).then(() => {\n      // ... do anything after successful upload. You can setState() or save the data\n      console.log('Images have all being uploaded')\n    });\n  }\n\n  render() {\n      var dropzone\n      if(!this.state.image){\n          //dropzone nya gambar kamera\n          dropzone=\n          <Dropzone id='dropzone' ref={dropzoneRef} onDrop={this.handleUploadImages}>\n          {({ getRootProps, getInputProps }) => (\n              <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <img style={{ width: '200px' }} src=\"https://www.mbsplugins.de/images/drop-files-here-extra.jpg\" alt=\"\" srcset=\"\" />\n              </div>\n          )}\n      </Dropzone>\n      }else{\n          //dropzonnya gambr dari response\n          dropzone=\n          <Dropzone id='dropzone' ref={dropzoneRef} onDrop={this.handleUploadImages}>\n          {({ getRootProps, getInputProps }) => (\n              <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <img style={{ width: 100 }} src={this.state.image} alt=\"\" srcset=\"\" />\n              </div>\n          )}\n      </Dropzone>\n      }\n    if(!localStorage.getItem('TOKEN')){\n        return(\n            <Redirect to='/login' /> \n        )\n    }else{\n\n    \n    return (\n      <Form>\n        <FormGroup row>\n          <Label for=\"exampleEmail\" sm={2}>Nama Produk</Label>\n          <Col sm={10}>\n            <Input type=\"text\" name=\"email\" id=\"exampleEmail\" />\n          </Col>\n        </FormGroup>\n        <FormGroup row>\n          <Label for=\"examplePassword\" sm={2}>Harga Produk</Label>\n          <Col sm={10}>\n            <Input type=\"number\" name=\"password\" id=\"examplePassword\"  />\n          </Col>\n        </FormGroup>\n        <FormGroup>\n            <Label for='dropzone'>Upload Gambar</Label>\n            {dropzone}\n        </FormGroup>\n        <FormGroup check row>\n          <Col sm={{ size: 10, offset: 2 }}>\n            <Button>Submit</Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    );\n  }\n}\n}"]},"metadata":{},"sourceType":"module"}