{"ast":null,"code":"var _jsxFileName = \"/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js\";\nimport React, { createRef } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nvar dropzoneRef = createRef();\nexport default class ProductForm2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUploadImages = images => {\n      // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n      const uploads = images.map(image => {\n        // our formdata\n        const formData = new FormData();\n        formData.append(\"file\", image);\n        formData.append(\"tags\", 'product_image'); // Add tags for the images - {Array}\n\n        formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n\n        formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n\n        formData.append(\"timestamp\", Date.now() / 1000 | 0); // Replace cloudinary upload URL with yours\n\n        return axios.post(\"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\", formData, {\n          headers: {\n            \"X-Requested-With\": \"XMLHttpRequest\"\n          }\n        }).then(response => {\n          //masukan logic\n          this.setState({\n            image: response.data.secure_url\n          });\n        });\n      }); // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n\n      axios.all(uploads).then(() => {\n        // ... do anything after successful upload. You can setState() or save the data\n        console.log('Images have all being uploaded');\n      });\n    };\n\n    this.state = {\n      image: ''\n    };\n  } // This function does the uploading to cloudinary\n\n\n  render() {\n    if ('state gambar = null') {//dropzone nya gambar kamera\n    } else {//dropzonnya gambr dari response\n      }\n\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleEmail\",\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Nama Produk\"), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"text\",\n      name: \"email\",\n      id: \"exampleEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))), React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"examplePassword\",\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Harga Produk\"), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"number\",\n      name: \"password\",\n      id: \"examplePassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"dropzone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Upload Gambar\"), React.createElement(Dropzone, {\n      id: \"dropzone\",\n      ref: dropzoneRef,\n      onDrop: this.handleUploadImages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, ({\n      getRootProps,\n      getInputProps\n    }) => React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(\"img\", {\n      style: {\n        width: 100\n      },\n      src: \"https://image.flaticon.com/icons/png/512/3/3901.png\",\n      alt: \"\",\n      srcset: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })))), React.createElement(FormGroup, {\n      check: true,\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: {\n        size: 10,\n        offset: 2\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js"],"names":["React","createRef","Col","Button","Form","FormGroup","Label","Input","FormText","ReactDOM","Dropzone","axios","dropzoneRef","ProductForm2","Component","constructor","props","handleUploadImages","images","uploads","map","image","formData","FormData","append","Date","now","post","headers","then","response","setState","data","secure_url","all","console","log","state","render","getRootProps","getInputProps","width","size","offset"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone'\nimport axios from 'axios'\n\nvar dropzoneRef = createRef()\n\nexport default class ProductForm2 extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state={\n            image:''\n        }\n    }\n\n    // This function does the uploading to cloudinary\n  handleUploadImages = images => {\n    // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n    const uploads = images.map(image => {\n      // our formdata\n      const formData = new FormData();\n      formData.append(\"file\", image);\n      formData.append(\"tags\", 'product_image'); // Add tags for the images - {Array}\n      formData.append(\"upload_preset\", \"ninopreset\"); // Replace the preset name with your own\n      formData.append(\"api_key\", \"234688971755288\"); // Replace API key with your own Cloudinary API key\n      formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n\n      // Replace cloudinary upload URL with yours\n      return axios.post(\n        \"https://api.cloudinary.com/v1_1/ninocloudinary/image/upload\",\n        formData, \n        { headers: { \"X-Requested-With\": \"XMLHttpRequest\" }})\n        .then(response => {\n            //masukan logic\n            this.setState({\n                image:response.data.secure_url\n            })\n        })\n    });\n\n    // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n    axios.all(uploads).then(() => {\n      // ... do anything after successful upload. You can setState() or save the data\n      console.log('Images have all being uploaded')\n    });\n  }\n\n  render() {\n      if('state gambar = null'){\n          //dropzone nya gambar kamera\n      }else{\n          //dropzonnya gambr dari response\n      }\n    return (\n      <Form>\n        <FormGroup row>\n          <Label for=\"exampleEmail\" sm={2}>Nama Produk</Label>\n          <Col sm={10}>\n            <Input type=\"text\" name=\"email\" id=\"exampleEmail\" />\n          </Col>\n        </FormGroup>\n        <FormGroup row>\n          <Label for=\"examplePassword\" sm={2}>Harga Produk</Label>\n          <Col sm={10}>\n            <Input type=\"number\" name=\"password\" id=\"examplePassword\"  />\n          </Col>\n        </FormGroup>\n        <FormGroup>\n            <Label for='dropzone'>Upload Gambar</Label>\n            <Dropzone id='dropzone' ref={dropzoneRef} onDrop={this.handleUploadImages}>\n              {({ getRootProps, getInputProps }) => (\n                  <div {...getRootProps()}>\n                      <input {...getInputProps()} />\n                      <img style={{ width: 100 }} src=\"https://image.flaticon.com/icons/png/512/3/3901.png\" alt=\"\" srcset=\"\" />\n                  </div>\n              )}\n          </Dropzone>\n        </FormGroup>\n        <FormGroup check row>\n          <Col sm={{ size: 10, offset: 2 }}>\n            <Button>Submit</Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}