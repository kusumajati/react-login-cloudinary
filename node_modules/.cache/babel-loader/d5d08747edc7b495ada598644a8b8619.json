{"ast":null,"code":"var _jsxFileName = \"/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js\";\nimport React from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone';\nimport axios from 'axios';\nexport default class ProductForm2 extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleUploadImages = images => {\n      // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n      const uploads = images.map(image => {\n        // our formdata\n        const formData = new FormData();\n        formData.append(\"file\", image);\n        formData.append(\"tags\", '{TAGS}'); // Add tags for the images - {Array}\n\n        formData.append(\"upload_preset\", \"{YOUR_PRESET}\"); // Replace the preset name with your own\n\n        formData.append(\"api_key\", \"{YOUR_API_KEY}\"); // Replace API key with your own Cloudinary API key\n\n        formData.append(\"timestamp\", Date.now() / 1000 | 0); // Replace cloudinary upload URL with yours\n\n        return axios.post(\"https://api.cloudinary.com/v1_1/{CLOUD_NAME}/image/upload\", formData, {\n          headers: {\n            \"X-Requested-With\": \"XMLHttpRequest\"\n          }\n        }).then(response => console.log(response.data));\n      }); // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n\n      axios.all(uploads).then(() => {\n        // ... do anything after successful upload. You can setState() or save the data\n        console.log('Images have all being uploaded');\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleEmail\",\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Nama Produk\"), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"text\",\n      name: \"email\",\n      id: \"exampleEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }))), React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"examplePassword\",\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Harga Produk\"), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"number\",\n      name: \"password\",\n      id: \"examplePassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))), React.createElement(FormGroup, {\n      check: true,\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: {\n        size: 10,\n        offset: 2\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/mahendra/Documents/react/react-login-cloudinary/src/Product/ProductForm2.js"],"names":["React","Col","Button","Form","FormGroup","Label","Input","FormText","ReactDOM","Dropzone","axios","ProductForm2","Component","handleUploadImages","images","uploads","map","image","formData","FormData","append","Date","now","post","headers","then","response","console","log","data","all","render","size","offset"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone'\nimport axios from 'axios'\n\n\n\nexport default class ProductForm2 extends React.Component {\n\n    // This function does the uploading to cloudinary\n  handleUploadImages = images => {\n    // uploads is an array that would hold all the post methods for each image to be uploaded, then we'd use axios.all()\n    const uploads = images.map(image => {\n      // our formdata\n      const formData = new FormData();\n      formData.append(\"file\", image);\n      formData.append(\"tags\", '{TAGS}'); // Add tags for the images - {Array}\n      formData.append(\"upload_preset\", \"{YOUR_PRESET}\"); // Replace the preset name with your own\n      formData.append(\"api_key\", \"{YOUR_API_KEY}\"); // Replace API key with your own Cloudinary API key\n      formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n\n      // Replace cloudinary upload URL with yours\n      return axios.post(\n        \"https://api.cloudinary.com/v1_1/{CLOUD_NAME}/image/upload\",\n        formData, \n        { headers: { \"X-Requested-With\": \"XMLHttpRequest\" }})\n        .then(response => console.log(response.data))\n    });\n\n    // We would use axios `.all()` method to perform concurrent image upload to cloudinary.\n    axios.all(uploads).then(() => {\n      // ... do anything after successful upload. You can setState() or save the data\n      console.log('Images have all being uploaded')\n    });\n  }\n\n  render() {\n    return (\n      <Form>\n        <FormGroup row>\n          <Label for=\"exampleEmail\" sm={2}>Nama Produk</Label>\n          <Col sm={10}>\n            <Input type=\"text\" name=\"email\" id=\"exampleEmail\" />\n          </Col>\n        </FormGroup>\n        <FormGroup row>\n          <Label for=\"examplePassword\" sm={2}>Harga Produk</Label>\n          <Col sm={10}>\n            <Input type=\"number\" name=\"password\" id=\"examplePassword\"  />\n          </Col>\n        </FormGroup>\n\n        <FormGroup check row>\n          <Col sm={{ size: 10, offset: 2 }}>\n            <Button>Submit</Button>\n          </Col>\n        </FormGroup>\n      </Form>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}